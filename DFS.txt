% This function makes sure that every element is in route is repeated only once to avoid loops.
%and check the order of elements form the query matches the route 
is_index([H] , 0 , H).
is_index([H|_], 0, H).
is_index([_|T] , Index, Element) :- Index > 0, Next is Index - 1, is_index(T, Next , Element).

%this is the basi case for the safe_rout function, it gives true when the current element position is
% equal to the positions of home
safe_rout( HX , HY , HX , HY , _ , _ , _ , _ , _ , _ , _ , _ , _ , _, NewArr , Counter , _):- 
    is_index(NewArr , Counter , [HX , HY] ). 

%this is the backtracking function it go through each current elemnt and move to all neighbors,
%trying to reach home.
%the first 12 parameters express the positions of Current human, Home, Mask, Doctor, Covid-1, Covid-2 agents
%then if the human is protected or not, the width of the array, the possible route(soulution),
%number of steps done to reach the current position, and limit of the current route. 
safe_rout( PX , PY , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , V , W,  NewArr , Counter , Lim  ) :-
    %in increase the width of the array so we can handle numbers from 1 to N instead of 0 to N-1
    NewW is W + 1,
    %next step in an optimization that checks if the amount of steps left ( which equals the limit minus
    %the number of steps already been made) and the steps left are less than the diagonal distance to home
    %we can discard this attempt to be a solution as it is impossible to reach home.
    StepsLeft is Lim - Counter,
    DHX is abs(PX - HX) - 1 , 
    DHY is abs(PY - HY) - 1,
    (StepsLeft > DHX , StepsLeft > DHY ),
    %the we check the current possion of the human to ensure it's still in the grid
    %and we ensure that the steps made is not greater than the limit set for this solution.
    Counter < Lim  , PY < NewW , PX < NewW,  PX > 0 , PY > 0 ,
    %then we check that the current position is not in an Covid infected cell while not protected
    is_index(NewArr , Counter , [PX , PY] ),
    (   ( ( PX == HX , PY == HY) ; ( PX == DX , PY == DY)  ) -> NewV is 1 ; NewV is V  ),

    (   NewV == 1 ; 
    
    DX1 is abs(PX - C1X) , 
    DY1 is abs(PY - C1Y) ,
    \+ (DX1 <2 , DY1 < 2 ),
    DX2 is abs(PX - C2X) , 
    DY2 is abs(PY - C2Y) ,
    \+ (DX2 <2 , DY2 < 2 )
        ),
    
    %finally we we try to move an all possible neighbours if the current possion to reach the home.
    PXP is PX+1 , PXM is PX-1 , PYP is PY+1 , PYM is PY-1 , New_c is Counter + 1 ,   
    (    
    safe_rout( PXP , PY , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c , Lim ) 
    ;
     safe_rout( PX , PYP , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    ; 
    safe_rout( PXP , PYP , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    ;
    safe_rout( PXM , PY , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c , Lim  ) 
    ;
    safe_rout( PX , PYM , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c , Lim  ) 
    ;
    safe_rout( PXP , PYP , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    ;
    safe_rout( PXP , PYM , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    ;
    safe_rout( PXM , PYP , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    ;
    safe_rout( PXM , PYM , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , NewV , W, NewArr , New_c, Lim  ) 
    )
    .

%solve function work as the main function.
%the first 10 parameters express the positions of Home, Mask, Doctor, Covid-1, Covid-2 agents,
%then the width of the array, the possible route(soulution), the maximum current length of route.
%and the maximum length that we can accept for a solution (we assume it to be 3*width of the grid).
solve(  HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , W, NewArr, A  ):-
   %we first try to find a solution with length equal to A starting from 1.
   %if a route from Human to Home with length equal to the A is not found we increment A by 1,
   % and try again until a solution is found. when A > 3 * width, then there is no solution.
   %and we print the we lost in this case.
    safe_rout( 1 , 1 , HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y , 0 , W, NewArr , 0 , A ) ->
    (   writeln("win") , writeln(A)  , writeln(NewArr) ) ; (   
                                                             NewA is A + 1,
                                                                N is 3 * W,
                                                                A < N ->  (
   solve(  HX , HY, MX , MY , DX , DY , C1X , C1Y , C2X , C2Y  , W, NewArr, NewA )
                                                                        
                                                                          ) ; writeln("Lose") 
    
                                                             ).



%Query example : 
%time(solve(8, 8, 3, 5, 8, 6, 4, 2, 5, 8, 9, BackTrack, 0)).
